pragma solidity ^0.4.20;

contract Owned{
    address owner;
    
    function Owned() public {
        owner = msg.sender;
    }
    
    modifier OnlyOwner{
        require(msg.sender == owner);
        _;
    }
    
    function kill(address to) public OnlyOwner{
        selfdestruct(to);
    }
}

library SafeMath {
    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b > 0);
        uint256 c = a / b;
        assert(a == b * c + a % b); 
        return c;
    }
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}


library MemberActions {
    using SafeMath for uint256;
    
    struct MemberData {
        bool isMember;
        bool voted;
        uint256 totalDonations;
        uint256 lastDonationAmount;
        uint256 lastDonationTimeStamp;
    }
    
    struct MembersData { mapping(address => MemberData) membersData; }
    
    function addMember(MembersData storage self, address _address) internal {
       self.membersData[_address].isMember = true;
    }
    
    function removeMember(MembersData storage self, address _address) internal {
        self.membersData[_address].isMember = false;
    }
    
    function voteExpressed(MembersData storage self, address _address) internal {
        self.membersData[_address].voted = true;
    }
    
    function voteReseted(MembersData storage self, address _address) internal {
        self.membersData[_address].voted = false;
    }
    
    function setTotalDonations(MembersData storage self, address _address, uint256 _lastDonation) internal {
        self.membersData[_address].totalDonations.add(_lastDonation);
    }
    
    function setLastDonationAmount(MembersData storage self, address _address, uint256 _lastDonation) internal {
        self.membersData[_address].lastDonationAmount = _lastDonation;
    }
    
    function setLastDonationTimeStamp(MembersData storage self, address _address) internal {
        self.membersData[_address].lastDonationTimeStamp = now;
    }
}


contract Members is Owned {
    using MemberActions for MemberActions.MemberData;
    using MemberActions for MemberActions.MembersData;
    using SafeMath for uint256;
    // When vote on new member is called, it triggers an event, which allows the other members to be notified about it.
    event VoteCalledOn(address _address, uint256 _timeStamp);
    
    MemberActions.MembersData members;
    uint256 allMembers;
    uint256 votedMembers;
    bool voteInProgress = false;
    address voteCaller;
    // In the constructor the owner is set as the first member. 
    function Members() public {
        members.addMember(owner);
        allMembers++;
    }
    
    modifier IsMember() {
        require(members.membersData[msg.sender].isMember == true);
        _;
    }
    
    modifier CanVote() {
        require(members.membersData[msg.sender].voted == false);
        _;
    }
    
    modifier CanCallVote() {
        require(!voteInProgress);
        _;
    }
    
    modifier CanStopVote() {
        require(voteCaller == msg.sender);
        _;
    }
    // Only a member (provided that there is no vote in progress already) can call a vote on a new one and it is considered automatically for a vote in favor of the proposal.
    function callVoteForNewMember(address _address) public IsMember CanCallVote {
        voteCaller = msg.sender;
        voteInProgress = true;
        VoteCalledOn(_address, now);
        vote();
        members.voteExpressed(msg.sender);
        votedMembers++;
        
    }
    
    function vote() public CanVote {
        require(voteInProgress);
        members.voteExpressed(msg.sender);
        votedMembers++;
    }
    // The voted member has to manually reset his voting right. This provides additional functionality - the member is allowed to withdraw his vote if he changes his mind in the course of the voting. 
    function resetVote() public IsMember {
        members.voteReseted(msg.sender);
    }
    // The member, who called the vote is its administrator and decides when to stop it.
    function stopVoteForNewMember(address _address) public CanStopVote {
        if(votedMembers > allMembers.div(2)){
            members.addMember(_address);
            allMembers++;
        }
            
            voteInProgress = false;
            votedMembers = 0;
    }
    
    function donate() public payable IsMember {
        members.setTotalDonations(msg.sender, msg.value);
        members.setLastDonationAmount(msg.sender, msg.value);
        members.setLastDonationTimeStamp(msg.sender);
    }
    
    function removeMemberByOwner(address _member) public OnlyOwner {
        require(!voteInProgress);
        members.removeMember(_member);
    }
    
    function removeMemberByMember(address _member) public {
        require(!voteInProgress);
        require(_member != owner);
        require(members.membersData[_member].lastDonationTimeStamp + 1 hours < now);
        members.removeMember(_member);
    }
}
